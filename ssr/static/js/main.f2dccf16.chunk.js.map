{"version":3,"sources":["utils/HttpHelper.js","constants/request.js","servers/loginServer.js","rootRouter.jsx","router.js","serviceWorker.js","model/login.js","index.js","model/index.js"],"names":["oldFetchfn","window","fetch","url","params","timeOut","fetchPromise","timeoutPromise","Promise","resolve","reject","setTimeout","Error","race","HttpHelper","urlt","headers","paramsArray","Object","keys","forEach","key","push","encodeURI","search","join","trueHeaders","creatHeaders","method","then","response","responseIntercept","catch","error","processError","body","creatBody","paramsEntity","JSON","stringify","originHeaders","localData","sessionStorage","getItem","parse","token","assign","notification","message","description","console","log","this","props","status","json","res","code","G_dispatch","type","payload","foo","location","href","split","devUrl","BaseURL","process","API_ENV","includes","LoginServer","test","get","login","post","MainPage","React","lazy","Login","RootRouter","dispatch","G_history","history","fallback","style","width","height","path","exact","render","to","Component","connect","RouterConfig","component","Boolean","hostname","match","namespace","state","effects","callback","call","put","setItem","data","routerRedux","loginOut","reducers","app","dva","createHistory","initialState","onError","e","model","router","start","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f2dccf16.chunk.js","sourcesContent":["import { message,notification } from 'antd';\r\nconst oldFetchfn = window.fetch;\r\n\r\n// 更新原生fetch，增加超时机制\r\nwindow.fetch = function (url, params, timeOut) {\r\n    const fetchPromise   = oldFetchfn(url, params);\r\n    const timeoutPromise = new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            // 网络超时之后 抛出错误 到processError\r\n            reject(new Error('请求超时，请稍后重试'));\r\n        }, 3000);\r\n    });\r\n    return Promise.race([fetchPromise, timeoutPromise]);\r\n};\r\n\r\n\r\nclass HttpHelper  {\r\n    constructor(){\r\n\r\n    }\r\n    /**\r\n     * 设置请求头\r\n     * @param {*} headers 请求头\r\n     */\r\n    static creatHeaders(headers){\r\n        let originHeaders = {\r\n            'Content-Type': 'application/json'\r\n        }\r\n        // 判断当前本地是否存储token,如果存储token则添加到header头\r\n        let localData = sessionStorage.getItem('userInfo');\r\n        if(localData){\r\n            originHeaders = {\r\n                ...originHeaders,\r\n                'x-token':JSON.parse(localData).token\r\n            }\r\n        }\r\n    \r\n        if(headers){\r\n            return Object.assign(originHeaders,headers)\r\n        }else {\r\n            return originHeaders;\r\n        }\r\n    }\r\n    \r\n    /**\r\n     * 请求本身失败状态\r\n     * @param {*} url 请求地址\r\n     */\r\n    static processError({url, error}){\r\n        notification.error({\r\n            message: `请求错误 ${url}`,\r\n            description: `${error}`\r\n        })\r\n        if (typeof (error) === 'string') {\r\n            return Promise.reject('网络请求出错，请稍后重试')\r\n        } else if (typeof (error) === 'object') {\r\n            return Promise.reject('网络请求出错，请稍后重试')\r\n        } else {\r\n            return Promise.reject('网络请求出错，请稍后重试')\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 请求响应拦截\r\n     * @param {*} response 请求响应\r\n     */\r\n    static async responseIntercept(response){\r\n        console.log(this.props, 'props')\r\n        if(!response){\r\n            return Promise.reject('请求返回为空，请稍后重试')\r\n        }\r\n        if(response && response.status){\r\n            const { url,status } = response;  // 请求本身\r\n            let res = await response.json();  // 请求响应返回\r\n            if(status === 200){\r\n                if(res.code !== 200){\r\n                    message.error(res.message)\r\n                }\r\n                if(res.code === 10402){\r\n                    // 重新登入 不要这样写 最好调用redux（要改\r\n                    window.G_dispatch({\r\n                        type: 'account/loginOut',\r\n                        payload: {}\r\n                    })\r\n                    let foo = window.location.href.split('#')[0]\r\n                    window.location.href = foo;\r\n                }\r\n                return res;\r\n            }else{\r\n               return Promise.reject(`请求错误 ${status}`)\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 创建post请求头的body\r\n     * @param {*} headers 请求头\r\n     * @param {*} params 请求参数\r\n     */\r\n    static creatBody({headers,params}){\r\n        if(params){\r\n            if(typeof (params) === 'string'){\r\n                return params\r\n            }\r\n            if(headers && headers['Content-Type'] === 'application/x-www-form-urlencoded'){\r\n                let body = '';\r\n                for(let key in params){\r\n                    if(key !== 'sysId'){\r\n                        body = body + key + '=' + params[key] + '&'\r\n                    }\r\n                }\r\n                body = body + 'sysId=qWechat'\r\n                return body;\r\n            }else {\r\n                return JSON.stringify(params);\r\n            }\r\n        }else{\r\n            return null\r\n        }\r\n    }\r\n    /**\r\n     * get请求\r\n     * @param {*} urlt 请求地址\r\n     * @param {*} params 参数\r\n     * @param {*} headers 请求头\r\n     */\r\n    get(urlt,{ params, headers }){\r\n        let url = urlt;\r\n        if(params){\r\n            const paramsArray = [];\r\n            // 拼接参数\r\n            Object.keys(params).forEach(key => paramsArray.push(`${key}=${encodeURI(params[key])}`));\r\n            if (url.search(/\\?/) === -1) {\r\n                url += `?${paramsArray.join('&')}`;\r\n            } else {\r\n                url += `&${paramsArray.join('&')}`;\r\n            }\r\n        }\r\n        let trueHeaders =  HttpHelper.creatHeaders(headers)\r\n        return fetch(url, {\r\n            method: 'GET',\r\n            headers: trueHeaders\r\n        }).then((response) => {\r\n            return HttpHelper.responseIntercept(response)\r\n        }).catch((error) => {\r\n            return HttpHelper.processError({url,error});\r\n        })\r\n    }\r\n    /**\r\n     * post请求\r\n     * @param {*} urlt 请求地址\r\n     * @param {*} params 参数\r\n     * @param {*} headers 请求头\r\n     */\r\n    post (url, {params, headers}){\r\n        let body = HttpHelper.creatBody({headers, params});\r\n        let trueHeaders = HttpHelper.creatHeaders(headers);\r\n        let paramsEntity = {\r\n            method: 'POST',\r\n            headers: trueHeaders,\r\n        }\r\n        if (body) {\r\n            paramsEntity.body = body;\r\n        }\r\n        return fetch(url, paramsEntity).then((response) => {\r\n            return HttpHelper.responseIntercept(response)\r\n        }).catch((error) => {\r\n            return HttpHelper.processError({url,error});\r\n        })\r\n    }\r\n    /**\r\n     * put请求\r\n     * @param {*} urlt 请求地址\r\n     * @param {*} params 参数\r\n     * @param {*} headers 请求头\r\n     */\r\n    put(url, {params, headers}){\r\n        let body = JSON.stringify(params) || '';\r\n        let trueHeaders = HttpHelper.creatHeaders(headers);\r\n        return fetch(url, {\r\n            method: 'PUT',\r\n            headers: trueHeaders,\r\n            body,\r\n        }).then((response) => {\r\n            return HttpHelper.responseIntercept(response) \r\n        }).catch((error) => {\r\n            return HttpHelper.processError({url,error});\r\n        })\r\n    }\r\n    /**\r\n     * delete请求\r\n     * @param {*} urlt 请求地址\r\n     * @param {*} params 参数\r\n     * @param {*} headers 请求头\r\n     */\r\n    delete(url, {params, headers}){\r\n        let body = JSON.stringify(params) || '';\r\n        let trueHeaders = HttpHelper.creatHeaders(headers);\r\n        return fetch(url, {\r\n            method: 'DELETE',\r\n            headers: trueHeaders,\r\n            body,\r\n        }).then((response) => {\r\n            return HttpHelper.responseIntercept(response) \r\n        }).catch((error) => {\r\n            return HttpHelper.processError({url,error});\r\n        })\r\n    }\r\n\r\n}\r\n\r\nexport default HttpHelper\r\n","const mockUrl = 'http://192.168.1.24:5000/mock/16'; // mock地址\r\nconst devUrl = 'https://177h27l110.iok.la/dss'; // 开发地址\r\nconst testUrl = \"https://177h27l110.iok.la/dss\"; // 测试地址\r\nconst proUrl = \"https://177h27l110.iok.la/dss\"; // 华索 生产地址\r\nlet BaseURL = '';\r\nconst ENV = process.env.NODE_ENV;\r\nconsole.log('API_ENV',process.env.API_ENV)\r\n\r\nif(ENV === \"development\"){\r\n    BaseURL = devUrl\r\n}else if(ENV === 'production' && process.env.API_ENV === 'test' && window.location.href.includes('192.168.1.24')){\r\n    BaseURL = devUrl\r\n}else if(ENV === 'production' && process.env.API_ENV === 'test' ){\r\n    BaseURL = testUrl\r\n}else if(ENV === 'production' && process.env.API_ENV === 'pro'){\r\n    BaseURL = proUrl\r\n}else {\r\n    BaseURL = devUrl\r\n}\r\n\r\nexport { BaseURL }","import HttpHelper from '@util/HttpHelper.js';\r\nimport { BaseURL } from '@constant/request.js';\r\n\r\nclass LoginServer extends HttpHelper{\r\n    test = ({\r\n        params = {},\r\n        headers = {}\r\n    }) => {\r\n        return this.get(BaseURL+ '/integratedmachine',{\r\n            params,\r\n            headers\r\n        })\r\n    }\r\n\r\n    login = ({\r\n        params = {},\r\n        headers = {}\r\n    }) => {\r\n        return this.post(BaseURL + '/user/login',{\r\n            params,\r\n            headers\r\n        })\r\n    }\r\n\r\n    \r\n}\r\n\r\nexport default new LoginServer()\r\n","/* eslint-disable no-dupe-keys */\r\n/**\r\n * Created by yixing on 2020/3/27.\r\n */\r\nimport React,{ Suspense } from 'react';\r\nimport {Route, Redirect} from 'dva/router';\r\nimport {connect} from 'dva';\r\nimport AnimatedRouter from 'react-animated-router'; \r\nimport './router-transition-animate.css';\r\nconst MainPage = React.lazy(() => import('@route/mainPage/mainPage'))\r\nconst Login = React.lazy(() => import('@route/loginPage/login'))\r\n\r\nclass RootRouter extends React.Component{\r\n\r\n    componentWillMount() {\r\n        window.G_dispatch = this.props.dispatch;\r\n        window.G_history = this.props.history;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Suspense fallback={<div style={{ width: '100%', height: '100%' }}>loading...</div>}>\r\n                <AnimatedRouter>\r\n                    <Route path=\"/\" exact render={props=> <Login {...props} />}/>\r\n                    <Route path=\"/layout\" render={props=> <MainPage {...props} />} />\r\n                    <Redirect to=\"/\" />\r\n                </AnimatedRouter>\r\n            </Suspense>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  connect(() => ({}))(RootRouter) \r\n","import React from 'react';\r\nimport { Router, Route } from 'dva/router';\r\nimport RootRouter from './rootRouter';\r\n\r\nfunction RouterConfig({ history }){\r\n    return (\r\n       <Router history={ history }>\r\n\t\t\t\t \t<Route path=\"/\" component={RootRouter} />\r\n\t\t\t </Router>\r\n    )\r\n}\r\n\r\nexport default RouterConfig;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { routerRedux } from 'dva/router';\r\nimport LoginServer from '@server/loginServer.js'\r\n\r\nexport default {\r\n    namespace: 'account',\r\n    state: {\r\n\r\n    },\r\n    effects: {\r\n        *login({payload, callback},{call,put}){\r\n            const res = yield LoginServer.login({params: payload});\r\n            if(res.code === 200){\r\n                sessionStorage.setItem('userInfo',JSON.stringify(res.data))\r\n                yield put(routerRedux.push('/layout'))\r\n            }\r\n        },\r\n        *loginOut({},{call, put}){\r\n            yield put(routerRedux.push('/'))\r\n        }   \r\n    },\r\n    reducers: {\r\n\r\n    }\r\n}","import dva from 'dva';\nimport { createBrowserHistory as createHistory } from 'history';\nimport router from './router.js';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport registerModels from '@model/index.js';\n\nconst app = dva({\n  history: createHistory(),\n  initialState: {},\n  onError(e){\n      console.log('dva_onError', e);// eslint-disable-line\n  }\n})\n\n// 3. 注册数据模型Model\nregisterModels(app);\n\n// 4. 注册路由Router\napp.router(router);\n\n// 5. start \napp.start('#root')\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import login from './login.js';\r\n\r\nexport default function registerModels(app){\r\n    app.model(login)\r\n}\r\n"],"sourceRoot":""}